import { TarEntryData, TarHeader, UnpackOptions } from "../index-1Ec89lu7.js";
import { Stats } from "node:fs";
import { Readable, Writable } from "node:stream";

//#region src/fs/types.d.ts

/**
 * Filesystem-specific configuration options for packing directories into tar archives.
 *
 * These options are specific to Node.js filesystem operations and use Node.js-specific
 * types like `Stats` for file system metadata.
 */
interface PackOptionsFS {
  /** Follow symlinks instead of storing them as symlinks (default: false) */
  dereference?: boolean;
  /** Filter function to include/exclude files (return false to exclude) */
  filter?: (path: string, stat: Stats) => boolean;
  /** Transform function to modify tar headers before packing */
  map?: (header: TarHeader) => TarHeader;
}
/**
 * Filesystem-specific configuration options for extracting tar archives to the filesystem.
 *
 * Extends the core {@link UnpackOptions} with Node.js filesystem-specific settings
 * for controlling file permissions and other filesystem behaviors.
 */
interface UnpackOptionsFS extends UnpackOptions {
  /** Default mode for created directories (e.g., 0o755). If not specified, uses mode from tar header or system default */
  dmode?: number;
  /** Default mode for created files (e.g., 0o644). If not specified, uses mode from tar header or system default */
  fmode?: number;
  /**
   * Prevent symlinks from pointing outside the extraction directory.
   * @default true
   */
  validateSymlinks?: boolean;
  /**
   * The maximum depth of paths to extract. Prevents Denial of Service (DoS) attacks
   * from malicious archives with deeply nested directories.
   *
   * Set to `Infinity` to disable depth checking (not recommended for untrusted archives).
   * @default 1024
   */
  maxDepth?: number;
}
/** Describes a file on the local filesystem to be added to the archive. */
interface FileSource {
  type: "file";
  /** Path to the source file on the local filesystem. */
  source: string;
  /** Destination path for the file inside the tar archive. */
  target: string;
}
/** Describes a directory on the local filesystem to be added to the archive. */
interface DirectorySource {
  type: "directory";
  /** Path to the source directory on the local filesystem. */
  source: string;
  /** Destination path for the directory inside the tar archive. */
  target: string;
}
/** Describes raw content to be added to the archive. Supports all TarEntryData types including strings, buffers, streams, blobs, and null. */
interface ContentSource {
  type: "content";
  /** Raw content to add. Supports string, Uint8Array, ArrayBuffer, ReadableStream, Blob, or null. */
  content: TarEntryData;
  /** Destination path for the content inside the tar archive. */
  target: string;
  /** Optional Unix file permissions for the entry (e.g., 0o644). */
  mode?: number;
}
/** A union of all possible source types for creating a tar archive. */
type TarSource = FileSource | DirectorySource | ContentSource;
//#endregion
//#region src/fs/archive.d.ts
/**
 * Packs multiple sources into a tar archive as a Node.js Readable stream from an
 * array of sources (files, directories, or raw content).
 *
 * @param sources - An array of {@link TarSource} objects describing what to include.
 * @returns A Node.js [`Readable`](https://nodejs.org/api/stream.html#class-streamreadable)
 * stream that outputs the tar archive bytes.
 *
 * @example
 * ```typescript
 * import { packTarSources, TarSource } from 'modern-tar/fs';
 *
 * const sources: TarSource[] = [
 * { type: 'file', source: './package.json', target: 'project/package.json' },
 * { type: 'directory', source: './src', target: 'project/src' },
 * { type: 'content', content: 'hello world', target: 'project/hello.txt' }
 * ];
 *
 * const archiveStream = packTarSources(sources);
 * await pipeline(archiveStream, createWriteStream('project.tar'));
 * ```
 */
declare function packTarSources(sources: TarSource[]): Readable;
//#endregion
//#region src/fs/pack.d.ts
/**
 * Pack a directory into a Node.js [`Readable`](https://nodejs.org/api/stream.html#class-streamreadable) stream containing tar archive bytes.
 *
 * Recursively walks the directory structure and creates tar entries for files, directories,
 * symlinks, and hardlinks.
 *
 * @param directoryPath - Path to directory to pack
 * @param options - Optional packing configuration
 * @returns Node.js [`Readable`](https://nodejs.org/api/stream.html#class-streamreadable) stream of tar archive bytes
 *
 * @example
 * ```typescript
 * import { packTar } from 'modern-tar/fs';
 * import { createWriteStream } from 'node:fs';
 * import { pipeline } from 'node:stream/promises';
 *
 * // Basic directory packing
 * const tarStream = packTar('/home/user/project');
 * await pipeline(tarStream, createWriteStream('project.tar'));
 *
 * // With filtering and transformation
 * const filteredStream = packTar('/my/project', {
 *   filter: (path, stats) => !path.includes('node_modules'),
 *   map: (header) => ({ ...header, uname: 'builder' }),
 *   dereference: true  // Follow symlinks
 * });
 * ```
 */
declare function packTar(directoryPath: string, options?: PackOptionsFS): Readable;
//#endregion
//#region src/fs/unpack.d.ts
/**
 * Extract a tar archive to a directory.
 *
 * Returns a Node.js [`Writable`](https://nodejs.org/api/stream.html#class-streamwritable)
 * stream to pipe tar archive bytes into. Files, directories, symlinks, and hardlinks
 * are written to the filesystem with correct permissions and timestamps.
 *
 * @param directoryPath - Path to directory where files will be extracted
 * @param options - Optional extraction configuration
 * @returns Node.js [`Writable`](https://nodejs.org/api/stream.html#class-streamwritable) stream to pipe tar archive bytes into
 *
 * @example
 * ```typescript
 * import { unpackTar } from 'modern-tar/fs';
 * import { createReadStream } from 'node:fs';
 * import { pipeline } from 'node:stream/promises';
 *
 * // Basic extraction
 * const tarStream = createReadStream('project.tar');
 * const extractStream = unpackTar('/output/directory');
 * await pipeline(tarStream, extractStream);
 *
 * // Extract with path manipulation and filtering
 * const advancedStream = unpackTar('/output', {
 *   strip: 1,  // Remove first path component
 *   filter: (header) => header.type === 'file' && header.name.endsWith('.js'),
 *   map: (header) => ({ ...header, mode: 0o644 })
 * });
 * await pipeline(createReadStream('archive.tar'), advancedStream);
 * ```
 */
declare function unpackTar(directoryPath: string, options?: UnpackOptionsFS): Writable;
//#endregion
export { type ContentSource, type DirectorySource, type FileSource, type PackOptionsFS, type TarSource, type UnpackOptionsFS, packTar, packTarSources, unpackTar };